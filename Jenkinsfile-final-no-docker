pipeline {
  agent any

  environment {
    REGISTRY_URL = credentials('nexus-registry-url')
    REGISTRY_CREDS = credentials('nexus-docker-creds')
    IMAGE_NAME = 'jenkins-demo-app'
    IMAGE_TAG = "${env.BUILD_NUMBER}"
  }

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '5'))
    skipDefaultCheckout()
  }

  stages {
    stage('Checkout') {
      steps {
        script {
          sh '''
            echo "=== CHECKOUT STAGE ==="
            echo "Current directory: $(pwd)"
            
            # Clean and initialize git repository
            if [ -d .git ] && ! git status >/dev/null 2>&1; then
              echo "Removing corrupted git repository..."
              rm -rf .git
            fi
            
            if [ ! -d .git ]; then
              echo "Initializing git repository..."
              git init
              git config --global --add safe.directory /var/jenkins_home/workspace/jenkins-demo-pipeline
              git remote add origin https://github.com/hantdev/jenkins-demo.git
            fi
            
            echo "Fetching and checking out code..."
            git fetch origin main
            git checkout -f main
            git reset --hard origin/main
            
            echo "Git status:"
            git status
            echo "Files in workspace:"
            ls -la
          '''
        }
      }
    }

    stage('Build with Buildah (No Docker Daemon)') {
      steps {
        sh '''
          echo "=== BUILD WITH BUILDAH (NO DOCKER DAEMON) ==="
          echo "Registry URL: ${REGISTRY_URL}"
          echo "Image Name: ${IMAGE_NAME}"
          echo "Image Tag: ${IMAGE_TAG}"
          
          # Install Buildah (container build tool that doesn't need Docker daemon)
          echo "Installing Buildah..."
          if command -v apt-get >/dev/null 2>&1; then
            apt-get update
            apt-get install -y buildah || echo "Buildah installation failed"
          elif command -v apk >/dev/null 2>&1; then
            apk add --no-cache buildah || echo "Buildah installation failed"
          else
            echo "Package manager not found, trying to install Buildah manually..."
            # Download Buildah binary
            curl -L "https://github.com/containers/buildah/releases/download/v1.31.0/buildah.linux.amd64" -o buildah
            chmod +x buildah
            mv buildah /usr/local/bin/
          fi
          
          # Check if Buildah is available
          if command -v buildah >/dev/null 2>&1; then
            echo "Buildah is available, version:"
            buildah --version
            
            # Create Docker config for authentication
            echo "Creating Docker authentication config..."
            mkdir -p /tmp/.docker
            
            cat > /tmp/.docker/config.json << EOF
{
  "auths": {
    "${REGISTRY_URL}": {
      "auth": "$(echo -n "${REGISTRY_CREDS_USR}:${REGISTRY_CREDS_PSW}" | base64)"
    }
  }
}
EOF
            
            echo "Docker config created successfully"
            
            # Test registry connectivity
            echo "Testing registry connectivity..."
            curl -I ${REGISTRY_URL}/v2/ || echo "Registry connectivity test completed"
            
            # Build image with Buildah
            echo "Building image with Buildah..."
            buildah bud -t ${REGISTRY_URL}/${IMAGE_NAME}:${IMAGE_TAG} .
            buildah tag ${REGISTRY_URL}/${IMAGE_NAME}:${IMAGE_TAG} ${REGISTRY_URL}/${IMAGE_NAME}:latest
            
            # Push image
            echo "Pushing image to registry..."
            buildah push ${REGISTRY_URL}/${IMAGE_NAME}:${IMAGE_TAG}
            buildah push ${REGISTRY_URL}/${IMAGE_NAME}:latest
            
            echo "=== BUILD COMPLETED SUCCESSFULLY WITH BUILDAH ==="
            echo "Images pushed to registry:"
            echo "  - ${REGISTRY_URL}/${IMAGE_NAME}:${IMAGE_TAG}"
            echo "  - ${REGISTRY_URL}/${IMAGE_NAME}:latest"
          else
            echo "ERROR: Buildah not available, trying alternative approach..."
            
            # Alternative: Use simple tar approach for demonstration
            echo "Creating application package instead of Docker image..."
            tar -czf ${IMAGE_NAME}-${IMAGE_TAG}.tar.gz .
            
            echo "=== APPLICATION PACKAGE CREATED ==="
            echo "Package created: ${IMAGE_NAME}-${IMAGE_TAG}.tar.gz"
            echo "Size: $(stat -c%s ${IMAGE_NAME}-${IMAGE_TAG}.tar.gz) bytes"
            echo "Note: This is a fallback approach since Docker daemon is not available"
          fi
          
          echo "=== END OF PIPELINE ==="
        '''
      }
    }
  }
}
