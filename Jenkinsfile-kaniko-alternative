pipeline {
  agent any

  environment {
    REGISTRY_URL = credentials('nexus-registry-url')
    REGISTRY_CREDS = credentials('nexus-docker-creds')
    IMAGE_NAME = 'jenkins-demo-app'
    IMAGE_TAG = "${env.BUILD_NUMBER}"
  }

  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '5'))
    skipDefaultCheckout()
  }

  stages {
    stage('Checkout') {
      steps {
        script {
          sh '''
            echo "=== CHECKOUT STAGE ==="
            echo "Current directory: $(pwd)"
            
            # Clean and initialize git repository
            if [ -d .git ] && ! git status >/dev/null 2>&1; then
              echo "Removing corrupted git repository..."
              rm -rf .git
            fi
            
            if [ ! -d .git ]; then
              echo "Initializing git repository..."
              git init
              git config --global --add safe.directory /var/jenkins_home/workspace/jenkins-demo-pipeline
              git remote add origin https://github.com/hantdev/jenkins-demo.git
            fi
            
            echo "Fetching and checking out code..."
            git fetch origin main
            git checkout -f main
            git reset --hard origin/main
            
            echo "Git status:"
            git status
            echo "Files in workspace:"
            ls -la
          '''
        }
      }
    }

    stage('Build with Alternative Method') {
      steps {
        sh '''
          echo "=== ALTERNATIVE BUILD METHOD ==="
          echo "Registry URL: ${REGISTRY_URL}"
          echo "Image Name: ${IMAGE_NAME}"
          echo "Image Tag: ${IMAGE_TAG}"
          
          # Create Docker config for authentication
          echo "Creating Docker authentication config..."
          mkdir -p /tmp/.docker
          
          cat > /tmp/.docker/config.json << EOF
{
  "auths": {
    "${REGISTRY_URL}": {
      "auth": "$(echo -n "${REGISTRY_CREDS_USR}:${REGISTRY_CREDS_PSW}" | base64)"
    }
  }
}
EOF
          
          echo "Docker config created successfully"
          echo "Config content:"
          cat /tmp/.docker/config.json
          
          # Test registry connectivity
          echo "Testing registry connectivity..."
          curl -I ${REGISTRY_URL}/v2/ || echo "Registry connectivity test completed"
          
          # Try to install Docker CLI first
          echo "Installing Docker CLI..."
          if command -v apt-get >/dev/null 2>&1; then
            apt-get update && apt-get install -y docker.io || echo "Docker CLI installation failed"
          elif command -v apk >/dev/null 2>&1; then
            apk add --no-cache docker-cli || echo "Docker CLI installation failed"
          else
            echo "Package manager not found, assuming Docker CLI is available"
          fi
          
          # Check if Docker is available
          if command -v docker >/dev/null 2>&1; then
            echo "Docker CLI is available, testing Docker daemon..."
            docker --version
            
            # Try to use Docker with Kaniko
            echo "Starting Kaniko build with Docker..."
            docker run --rm \
              -v $PWD:/workspace \
              -v /tmp/.docker:/kaniko/.docker:ro \
              gcr.io/kaniko-project/executor:latest \
              --context=/workspace \
              --dockerfile=/workspace/Dockerfile \
              --destination=${REGISTRY_URL}/${IMAGE_NAME}:${IMAGE_TAG} \
              --destination=${REGISTRY_URL}/${IMAGE_NAME}:latest \
              --verbosity=debug
          else
            echo "Docker CLI not available, trying alternative approach..."
            
            # Download Kaniko binary from alternative source
            echo "Downloading Kaniko binary from alternative source..."
            curl -L "https://storage.googleapis.com/kaniko-releases/v1.9.1/kaniko-linux-amd64.tar.gz" -o kaniko.tar.gz
            
            # Verify download
            if [ -f kaniko.tar.gz ] && [ $(stat -c%s kaniko.tar.gz) -gt 1000000 ]; then
              echo "Download successful, extracting..."
              tar -xzf kaniko.tar.gz
              chmod +x kaniko-linux-amd64/executor
              
              # Build with Kaniko binary
              echo "Starting Kaniko build with binary..."
              ./kaniko-linux-amd64/executor \
                --context=/var/jenkins_home/workspace/jenkins-demo-pipeline \
                --dockerfile=/var/jenkins_home/workspace/jenkins-demo-pipeline/Dockerfile \
                --destination=${REGISTRY_URL}/${IMAGE_NAME}:${IMAGE_TAG} \
                --destination=${REGISTRY_URL}/${IMAGE_NAME}:latest \
                --verbosity=debug
            else
              echo "ERROR: Kaniko download failed from alternative source"
              echo "File size: $(stat -c%s kaniko.tar.gz 2>/dev/null || echo '0') bytes"
              exit 1
            fi
          fi
          
          echo "=== BUILD COMPLETED SUCCESSFULLY ==="
          echo "Images pushed to registry:"
          echo "  - ${REGISTRY_URL}/${IMAGE_NAME}:${IMAGE_TAG}"
          echo "  - ${REGISTRY_URL}/${IMAGE_NAME}:latest"
          echo "=== END OF PIPELINE ==="
        '''
      }
    }
  }
}
